generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Board {
  id            String @id @default(uuid())
  orgId         String @map("org_id")
  title         String
  imageId       String @map("image_id")
  imageThumbUrl String @map("image_thumb_url") @db.Text
  imageFullUrl  String @map("image_full_url") @db.Text
  imageUserName String @map("image_user_name") @db.Text
  imageLinkHTML String @map("image_link_html") @db.Text

  lists List[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model List {
  id    String @id @default(uuid())
  title String
  order Int

  boardId String @map("board_id")
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  cards Card[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([boardId])
}

model Card {
  id          String  @id @default(uuid())
  title       String
  order       Int
  description String? @db.Text

  listId String @map("list_id")
  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([listId])
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
}

enum ENTITY_TYPE {
  BOARD
  LIST
  CARD
}

model Auditlog {
  id          String      @id @default(uuid())
  orgId       String      @map("org_id")
  action      ACTION
  entityId    String      @map("entity_id")
  entityType  ENTITY_TYPE @map("entity_type")
  entityTitle String      @map("entity_title")
  userId      String      @map("user_id")
  userImage   String      @map("user_image") @db.Text
  userName    String      @map("user_name") @db.Text

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model OrgLimit {
  id    String @id @default(uuid())
  orgId String @unique
  count Int    @default(0)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model OrgSubscription {
  id    String @id @default(uuid())
  orgId String @unique @map("org_id")

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @unique @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}
